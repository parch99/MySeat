{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../storitve/myseat-podatki.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction PasswordResetComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction PasswordResetComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.successMessage);\n  }\n}\nexport let PasswordResetComponent = /*#__PURE__*/(() => {\n  class PasswordResetComponent {\n    constructor(myseatPodatkiStoritev, route) {\n      this.myseatPodatkiStoritev = myseatPodatkiStoritev;\n      this.route = route;\n      this.errorMessage = \"\";\n      this.successMessage = \"\";\n      this.passwordResetData = {\n        password1: \"\",\n        password2: \"\"\n      };\n      this.prijavniPodatki = {\n        ime: \"\",\n        elektronskiNaslov: \"\",\n        geslo: \"\"\n      };\n    }\n    checkPasswordMatch() {\n      this.errorMessage = \"\";\n      if (!this.passwordResetData.password1 || !this.passwordResetData.password2) this.errorMessage = \"Fields can not be empty\";else if (this.passwordResetData.password1 != this.passwordResetData.password2) this.errorMessage = \"Passwords dont match\";else this.initializePasswordReset();\n    }\n    initializePasswordReset() {\n      this.prijavniPodatki.elektronskiNaslov = this.email;\n      this.prijavniPodatki.geslo = this.passwordResetData.password1;\n      this.errorMessage = \"\";\n      this.successMessage = \"\";\n      this.myseatPodatkiStoritev.resetPassword(this.prijavniPodatki).then(odgovor => {\n        this.successMessage = odgovor.sporočilo;\n      }).catch(error => this.errorMessage = error);\n    }\n    ngOnInit() {\n      this.token = this.route.snapshot.paramMap.get('token');\n      this.myseatPodatkiStoritev.resetPasswordGetuserid(this.token).then(user => {\n        this.email = user.user.elektronskiNaslov;\n        console.log(user.user.elektronskiNaslov);\n      }).catch(error => this.errorMessage = error);\n    }\n  }\n  PasswordResetComponent.ɵfac = function PasswordResetComponent_Factory(t) {\n    return new (t || PasswordResetComponent)(i0.ɵɵdirectiveInject(i1.MyseatPodatkiService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  PasswordResetComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PasswordResetComponent,\n    selectors: [[\"app-password-reset\"]],\n    decls: 23,\n    vars: 4,\n    consts: [[1, \"signup-form\", \"text-center\"], [\"autocomplete\", \"off\", 3, \"submit\"], [\"role\", \"alert\", \"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"role\", \"alert\", \"class\", \"alert alert-success\", 4, \"ngIf\"], [1, \"form-group\"], [\"for\", \"password1\"], [\"name\", \"password1\", \"type\", \"password\", \"id\", \"password1\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"password2\"], [\"name\", \"password2\", \"type\", \"password\", \"id\", \"password2\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"passwordHelp\", 1, \"form-text\", \"text-muted\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\"]],\n    template: function PasswordResetComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"br\")(1, \"br\")(2, \"br\")(3, \"br\");\n        i0.ɵɵelementStart(4, \"div\", 0)(5, \"form\", 1);\n        i0.ɵɵlistener(\"submit\", function PasswordResetComponent_Template_form_submit_5_listener() {\n          return ctx.checkPasswordMatch();\n        });\n        i0.ɵɵtemplate(6, PasswordResetComponent_div_6_Template, 2, 1, \"div\", 2);\n        i0.ɵɵtemplate(7, PasswordResetComponent_div_7_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementStart(8, \"div\", 4)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"New Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function PasswordResetComponent_Template_input_ngModelChange_11_listener($event) {\n          return ctx.passwordResetData.password1 = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 4)(13, \"label\", 7);\n        i0.ɵɵtext(14, \"Confirm password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function PasswordResetComponent_Template_input_ngModelChange_15_listener($event) {\n          return ctx.passwordResetData.password2 = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"small\", 9);\n        i0.ɵɵtext(17, \"Passwords must contain at least eight characters, including at least 1 letter and 1 number.>\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"button\", 10);\n        i0.ɵɵtext(19, \"Reset password\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(20, \"br\")(21, \"br\")(22, \"br\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.successMessage);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.passwordResetData.password1);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.passwordResetData.password2);\n      }\n    },\n    dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm],\n    styles: [\"body[_ngcontent-%COMP%]{background-color:#f5f5f5}.form-control[_ngcontent-%COMP%]{height:35px;border:1px solid rgb(179,179,179)}.form-control[_ngcontent-%COMP%], .btn[_ngcontent-%COMP%]{border-radius:3px}.signup-form[_ngcontent-%COMP%]{display:block;margin-left:auto;margin-right:auto;max-width:350px;min-width:350px}.signup-form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{color:#000;font-weight:600;font-size:16px;border-radius:3px;margin-bottom:15px;margin-top:15px;background:#fff;box-shadow:1px 5px 7px 1px #00000026;padding:30px}.signup-form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{margin-bottom:5px}.signup-form[_ngcontent-%COMP%]   hr[_ngcontent-%COMP%]{margin:0 -30px 20px}.signup-form[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]{margin-bottom:15px}.signup-form[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{font-size:15px;font-weight:700;margin-top:10px;background:#ff002b;border-radius:1vmin;border:none;min-width:140px}.signup-form[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]:hover, .signup-form[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]:focus{background:#ff004cfa!important;outline:none}.signup-form[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:#fff;text-decoration:underline}.signup-form[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{text-decoration:none}.signup-form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:#ff002b;text-decoration:none}.signup-form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{text-decoration:underline}.signup-form[_ngcontent-%COMP%]   .hint-text[_ngcontent-%COMP%]{padding-bottom:15px;text-align:center}\\n/*# sourceMappingURL=password-reset.component.css.map*/\"]\n  });\n  return PasswordResetComponent;\n})();","map":{"version":3,"mappings":"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","names":["i0","PasswordResetComponent","constructor","myseatPodatkiStoritev","route","password1","password2","ime","elektronskiNaslov","geslo","checkPasswordMatch","errorMessage","passwordResetData","initializePasswordReset","prijavniPodatki","email","successMessage","resetPassword","then","odgovor","sporočilo","catch","error","ngOnInit","token","snapshot","paramMap","get","resetPasswordGetuserid","user","console","log","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\MySeat\\app_public\\src\\app\\skupno\\komponenti\\password-reset\\password-reset.component.html","C:\\Users\\HP\\Desktop\\MySeat\\app_public\\src\\app\\skupno\\komponenti\\password-reset\\password-reset.component.ts"],"sourcesContent":["<br><br><br><br>\r\n<div class=\"signup-form text-center\">\r\n    <form (submit)=\"checkPasswordMatch()\" autocomplete=\"off\" >\r\n        <div role=\"alert\" *ngIf=\"errorMessage\" class=\"alert alert-danger\">{{ errorMessage }}</div>\r\n        <div role=\"alert\" *ngIf=\"successMessage\" class=\"alert alert-success\">{{ successMessage }}</div>\r\n        <div class=\"form-group\">\r\n            <label for=\"password1\">New Password</label>\r\n            <input name=\"password1\" type=\"password\" class=\"form-control\" id=\"password1\"\r\n                [(ngModel)]=\"passwordResetData.password1\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"password2\">Confirm password</label>\r\n            <input name=\"password2\" type=\"password\" class=\"form-control\" id=\"password2\"\r\n            [(ngModel)]=\"passwordResetData.password2\">\r\n            <small id=\"passwordHelp\" class=\"form-text text-muted\">Passwords must contain at least eight characters, including at least 1 letter and 1 number.></small>\r\n        </div>\r\n        <button type=\"submit\" class=\"btn btn-primary\" >Reset password</button>\r\n    </form><br><br><br>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { MyseatPodatkiService } from '../../storitve/myseat-podatki.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-password-reset',\r\n  templateUrl: './password-reset.component.html',\r\n  styleUrls: ['./password-reset.component.css']\r\n})\r\nexport class PasswordResetComponent implements OnInit {\r\n\r\n  constructor(private myseatPodatkiStoritev: MyseatPodatkiService, private route: ActivatedRoute) {}\r\n\r\n  public token: string;\r\n  public email: string;\r\n  public errorMessage = \"\";\r\n  public successMessage = \"\";\r\n  public passwordResetData = {\r\n    password1: \"\",\r\n    password2: \"\"\r\n  }\r\n  public prijavniPodatki = {\r\n    ime: \"\",\r\n    elektronskiNaslov: \"\",\r\n    geslo: \"\"\r\n  }\r\n  public checkPasswordMatch(): void {\r\n    this.errorMessage = \"\";\r\n    if(!this.passwordResetData.password1 || !this.passwordResetData.password2)\r\n      this.errorMessage = \"Fields can not be empty\";\r\n    else if(this.passwordResetData.password1 != this.passwordResetData.password2)\r\n      this.errorMessage = \"Passwords dont match\";\r\n    else\r\n      this.initializePasswordReset();\r\n  }\r\n  \r\n  private initializePasswordReset(): void {\r\n    this.prijavniPodatki.elektronskiNaslov = this.email;\r\n    this.prijavniPodatki.geslo = this.passwordResetData.password1;\r\n    this.errorMessage = \"\";\r\n    this.successMessage = \"\";\r\n    this.myseatPodatkiStoritev\r\n      .resetPassword(this.prijavniPodatki)\r\n      .then((odgovor) => {\r\n        this.successMessage = odgovor.sporočilo;\r\n      })\r\n      .catch(error => this.errorMessage = error);\r\n  }\r\n  \r\n  ngOnInit(): void {\r\n    this.token = this.route.snapshot.paramMap.get('token');\r\n    this.myseatPodatkiStoritev.resetPasswordGetuserid(this.token)\r\n      .then(user => {\r\n        this.email = user.user.elektronskiNaslov;\r\n        console.log(user.user.elektronskiNaslov);\r\n      })\r\n      .catch(error => this.errorMessage = error);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}