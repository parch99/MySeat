{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { SHRAMBA_BRSKALNIKA } from '../razredi/shramba';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MyseatPodatkiService = /*#__PURE__*/(() => {\n  class MyseatPodatkiService {\n    constructor(http, shramba) {\n      this.http = http;\n      this.shramba = shramba;\n      this.apiUrl = environment.apiUrl;\n    }\n    prijava(uporabnik) {\n      return this.avtentikacija('prijava', uporabnik);\n    }\n    registracija(uporabnik) {\n      return this.avtentikacija('registracija', uporabnik);\n    }\n    avtentikacija(urlNaslov, uporabnik) {\n      const url = `${this.apiUrl}/${urlNaslov}`;\n      return this.http.post(url, uporabnik).toPromise().then(rezultat => rezultat).catch(this.obdelajNapako);\n    }\n    sendRecoveryEmail(emailData) {\n      const url = `${this.apiUrl}/send-recovery-email`;\n      return this.http.post(url, emailData).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    resetPassword(uporabnik) {\n      const url = `${this.apiUrl}/reset-password`;\n      return this.http.post(url, uporabnik).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    resetPasswordGetuserid(token) {\n      const url = `${this.apiUrl}/reset-password/${token}`;\n      return this.http.get(url).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    pridobiLokacije(lat, lng) {\n      const maxRazdalja = 1000;\n      const url = `${this.apiUrl}/list/lokacije?lng=${lng}&lat=${lat}&maxRazdalja=${maxRazdalja}`;\n      return this.http.get(url).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    pridobiPodrobnostiLokacije(idLokacije) {\n      const url = `${this.apiUrl}/lokacije/${idLokacije}`;\n      return this.http.get(url).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    posodobiLokacijo(idLokacije, podatki) {\n      const url = `${this.apiUrl}/lokacije/${idLokacije}`;\n      const httpLastnosti = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\n        })\n      };\n      return this.http.put(url, podatki, httpLastnosti).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    pridobiUporabnike() {\n      const url = `${this.apiUrl}/uporabniki`;\n      return this.http.get(url).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    pridobiPodrobnostiUporabnika(idUporabnika) {\n      const url = `${this.apiUrl}/uporabnik/${idUporabnika}`;\n      return this.http.get(url).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    dodajKomentarLokaciji(idLokacije, podatkiObrazca) {\n      const url = `${this.apiUrl}/lokacije/${idLokacije}/komentarji`;\n      const httpLastnosti = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\n        })\n      };\n      return this.http.post(url, podatkiObrazca, httpLastnosti).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    dodajRestoran(podatkiObrazca) {\n      const url = `${this.apiUrl}/list/lokacije`;\n      const httpLastnosti = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\n        })\n      };\n      return this.http.post(url, podatkiObrazca, httpLastnosti).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    deleteLocation(idLokacije) {\n      const url = `${this.apiUrl}/lokacije/${idLokacije}`;\n      const httpLastnosti = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\n        })\n      };\n      return this.http.delete(url, httpLastnosti).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    deleteComment(idLokacije, idKomentara) {\n      const url = `${this.apiUrl}/lokacije/${idLokacije}/komentarji/${idKomentara}`;\n      const httpLastnosti = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\n        })\n      };\n      return this.http.delete(url, httpLastnosti).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    editComment(idLokacije, idKomentara, podatki) {\n      const url = `${this.apiUrl}/lokacije/${idLokacije}/komentarji/${idKomentara}`;\n      const httpLastnosti = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\n        })\n      };\n      return this.http.put(url, podatki, httpLastnosti).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    dodajEmail(podatkiObrazca) {\n      const url = `${this.apiUrl}/newsletter`;\n      return this.http.post(url, podatkiObrazca).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    obdelajNapako(napaka) {\n      console.error('Prišlo je do napake', napaka.error[\"sporočilo\"] || napaka.error.errmsg || napaka.message || napaka);\n      return Promise.reject(napaka.error[\"sporočilo\"] || napaka.error.errmsg || napaka.message || napaka);\n    }\n  }\n  MyseatPodatkiService.ɵfac = function MyseatPodatkiService_Factory(t) {\n    return new (t || MyseatPodatkiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(SHRAMBA_BRSKALNIKA));\n  };\n  MyseatPodatkiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MyseatPodatkiService,\n    factory: MyseatPodatkiService.ɵfac,\n    providedIn: 'root'\n  });\n  return MyseatPodatkiService;\n})();","map":{"version":3,"mappings":"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","names":["HttpHeaders","environment","SHRAMBA_BRSKALNIKA","MyseatPodatkiService","constructor","http","shramba","apiUrl","prijava","uporabnik","avtentikacija","registracija","urlNaslov","url","post","toPromise","then","rezultat","catch","obdelajNapako","sendRecoveryEmail","emailData","odgovor","resetPassword","resetPasswordGetuserid","token","get","pridobiLokacije","lat","lng","maxRazdalja","pridobiPodrobnostiLokacije","idLokacije","posodobiLokacijo","podatki","httpLastnosti","headers","getItem","put","pridobiUporabnike","pridobiPodrobnostiUporabnika","idUporabnika","dodajKomentarLokaciji","podatkiObrazca","dodajRestoran","deleteLocation","delete","deleteComment","idKomentara","editComment","dodajEmail","napaka","console","error","errmsg","message","Promise","reject","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\MySeat\\app_public\\src\\app\\skupno\\storitve\\myseat-podatki.service.ts"],"sourcesContent":["import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Lokacija, Komentar } from '../razredi/lokacija';\r\nimport { Uporabnik } from '../razredi/uporabnik';\r\nimport { RezultatAvtentikacije } from '../razredi/rezultat-avtentikacije';\r\nimport { environment } from '../../../environments/environment';\r\nimport { SHRAMBA_BRSKALNIKA } from '../razredi/shramba';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MyseatPodatkiService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(SHRAMBA_BRSKALNIKA) private shramba: Storage\r\n  ) { }\r\n\r\n  private apiUrl = environment.apiUrl;\r\n  public prijava(uporabnik: Uporabnik): Promise<RezultatAvtentikacije> {\r\n    return this.avtentikacija('prijava', uporabnik);\r\n  }\r\n  public registracija(uporabnik: Uporabnik): Promise<RezultatAvtentikacije> {\r\n    return this.avtentikacija('registracija', uporabnik);\r\n  }\r\n  private avtentikacija(urlNaslov: string, uporabnik: Uporabnik): Promise<RezultatAvtentikacije> {\r\n    const url: string = `${this.apiUrl}/${urlNaslov}`;\r\n    return this.http\r\n      .post(url, uporabnik)\r\n      .toPromise()\r\n      .then(rezultat => rezultat as RezultatAvtentikacije)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n  public sendRecoveryEmail(emailData: any): Promise<any> {\r\n    const url: string = `${this.apiUrl}/send-recovery-email`;\r\n    return this.http\r\n      .post(url, emailData)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as any)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n  public resetPassword(uporabnik: Uporabnik): Promise<any> {\r\n    const url: string = `${this.apiUrl}/reset-password`;\r\n    return this.http\r\n      .post(url, uporabnik)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as any)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n  public resetPasswordGetuserid(token: string): Promise<any> {\r\n    const url: string = `${this.apiUrl}/reset-password/${token}`;\r\n    return this.http\r\n      .get(url)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as any)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n  public pridobiLokacije(lat: number, lng: number): Promise<Lokacija[]> {\r\n    const maxRazdalja: number = 1000;\r\n    const url: string = `${this.apiUrl}/list/lokacije?lng=${lng}&lat=${lat}&maxRazdalja=${maxRazdalja}`;\r\n    return this.http\r\n      .get(url)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as Lokacija[])\r\n      .catch(this.obdelajNapako);\r\n  }\r\n  public pridobiPodrobnostiLokacije(idLokacije: string): Promise<Lokacija> {\r\n    const url: string = `${this.apiUrl}/lokacije/${idLokacije}`;\r\n    return this.http\r\n      .get(url)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as Lokacija)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n  public posodobiLokacijo(idLokacije: string, podatki: Lokacija): Promise<Lokacija> {\r\n    const url: string = `${this.apiUrl}/lokacije/${idLokacije}`;\r\n    const httpLastnosti = {\r\n      headers: new HttpHeaders({\r\n        'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\r\n      })\r\n    };\r\n    return this.http\r\n      .put(url, podatki, httpLastnosti)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as Lokacija)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n\r\n  public pridobiUporabnike(): Promise<Uporabnik[]> {\r\n    const url: string = `${this.apiUrl}/uporabniki`;\r\n    return this.http\r\n      .get(url)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as Uporabnik[])\r\n      .catch(this.obdelajNapako);\r\n  }\r\n  public pridobiPodrobnostiUporabnika(idUporabnika: string): Promise<Uporabnik> {\r\n    const url: string = `${this.apiUrl}/uporabnik/${idUporabnika}`;\r\n    return this.http\r\n      .get(url)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as Uporabnik)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n\r\n  public dodajKomentarLokaciji(idLokacije: string, podatkiObrazca: Komentar): Promise<Komentar> {\r\n    const url: string = `${this.apiUrl}/lokacije/${idLokacije}/komentarji`;\r\n    const httpLastnosti = {\r\n      headers: new HttpHeaders({\r\n        'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\r\n      })\r\n    };\r\n    return this.http\r\n      .post(url, podatkiObrazca, httpLastnosti)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as Komentar)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n  \r\n  public dodajRestoran(podatkiObrazca: any): Promise<any> {\r\n    const url: string = `${this.apiUrl}/list/lokacije`;\r\n    const httpLastnosti = {\r\n      headers: new HttpHeaders({\r\n        'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\r\n      })\r\n    };\r\n    return this.http\r\n      .post(url, podatkiObrazca, httpLastnosti)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as any)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n  public deleteLocation(idLokacije: string): Promise<any> {\r\n    const url: string = `${this.apiUrl}/lokacije/${idLokacije}`;\r\n    const httpLastnosti = {\r\n      headers: new HttpHeaders({\r\n        'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\r\n      })\r\n    };\r\n    return this.http\r\n      .delete(url, httpLastnosti)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as any)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n  public deleteComment(idLokacije: string, idKomentara: string): Promise<Komentar> {\r\n    const url: string = `${this.apiUrl}/lokacije/${idLokacije}/komentarji/${idKomentara}`;\r\n    const httpLastnosti = {\r\n      headers: new HttpHeaders({\r\n        'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\r\n      })\r\n    };\r\n    return this.http\r\n      .delete(url, httpLastnosti)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as Komentar)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n  public editComment(idLokacije: string, idKomentara: string, podatki: Komentar): Promise<Komentar> {\r\n    const url: string = `${this.apiUrl}/lokacije/${idLokacije}/komentarji/${idKomentara}`;\r\n    const httpLastnosti = {\r\n      headers: new HttpHeaders({\r\n        'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\r\n      })\r\n    };\r\n    return this.http\r\n      .put(url, podatki, httpLastnosti)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as Komentar)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n\r\n  public dodajEmail(podatkiObrazca: any): Promise<any> {\r\n    const url: string = `${this.apiUrl}/newsletter`;\r\n    return this.http\r\n      .post(url, podatkiObrazca)\r\n      .toPromise()\r\n      .then(odgovor => odgovor as any)\r\n      .catch(this.obdelajNapako);\r\n  }\r\n  private obdelajNapako(napaka: any): Promise<any> {\r\n    console.error('Prišlo je do napake', napaka.error[\"sporočilo\"] || napaka.error.errmsg || napaka.message || napaka);\r\n    return Promise.reject(napaka.error[\"sporočilo\"] || napaka.error.errmsg || napaka.message || napaka);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}