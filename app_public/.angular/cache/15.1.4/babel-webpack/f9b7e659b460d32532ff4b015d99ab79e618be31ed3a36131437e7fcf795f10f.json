{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../storitve/myseat-podatki.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction PasswordResetComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction PasswordResetComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.successMessage);\n  }\n}\nexport let PasswordResetComponent = /*#__PURE__*/(() => {\n  class PasswordResetComponent {\n    constructor(myseatPodatkiStoritev, route) {\n      this.myseatPodatkiStoritev = myseatPodatkiStoritev;\n      this.route = route;\n      this.errorMessage = \"\";\n      this.successMessage = \"\";\n      this.passwordResetData = {\n        password1: \"\",\n        password2: \"\"\n      };\n      this.prijavniPodatki = {\n        ime: \"\",\n        elektronskiNaslov: \"\",\n        geslo: \"\"\n      };\n    }\n    checkPasswordMatch() {\n      this.errorMessage = \"\";\n      if (!this.passwordResetData.password1 || !this.passwordResetData.password2) this.errorMessage = \"Fields can not be empty\";else if (this.passwordResetData.password1 != this.passwordResetData.password2) this.errorMessage = \"Passwords dont match\";else this.initializePasswordReset();\n    }\n    initializePasswordReset() {\n      this.prijavniPodatki.elektronskiNaslov = this.email;\n      this.prijavniPodatki.geslo = this.passwordResetData.password1;\n      this.errorMessage = \"\";\n      this.successMessage = \"\";\n      this.myseatPodatkiStoritev.resetPassword(this.prijavniPodatki).then(odgovor => {\n        this.successMessage = odgovor.sporočilo;\n      }).catch(error => this.errorMessage = error);\n    }\n    ngOnInit() {\n      this.token = this.route.snapshot.paramMap.get('token');\n      this.myseatPodatkiStoritev.resetPasswordGetuserid(this.token).then(user => {\n        this.email = user.user.elektronskiNaslov;\n        console.log(user.user.elektronskiNaslov);\n      }).catch(error => this.errorMessage = error);\n    }\n  }\n  PasswordResetComponent.ɵfac = function PasswordResetComponent_Factory(t) {\n    return new (t || PasswordResetComponent)(i0.ɵɵdirectiveInject(i1.MyseatPodatkiService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  PasswordResetComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PasswordResetComponent,\n    selectors: [[\"app-password-reset\"]],\n    decls: 23,\n    vars: 4,\n    consts: [[1, \"signup-form\", \"text-center\"], [\"autocomplete\", \"off\", 3, \"submit\"], [\"role\", \"alert\", \"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"role\", \"alert\", \"class\", \"alert alert-success\", 4, \"ngIf\"], [1, \"form-group\"], [\"for\", \"password1\"], [\"name\", \"password1\", \"type\", \"password\", \"id\", \"password1\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"password2\"], [\"name\", \"password2\", \"type\", \"password\", \"id\", \"password2\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"passwordHelp\", 1, \"form-text\", \"text-muted\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\"]],\n    template: function PasswordResetComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"br\")(1, \"br\")(2, \"br\")(3, \"br\");\n        i0.ɵɵelementStart(4, \"div\", 0)(5, \"form\", 1);\n        i0.ɵɵlistener(\"submit\", function PasswordResetComponent_Template_form_submit_5_listener() {\n          return ctx.checkPasswordMatch();\n        });\n        i0.ɵɵtemplate(6, PasswordResetComponent_div_6_Template, 2, 1, \"div\", 2);\n        i0.ɵɵtemplate(7, PasswordResetComponent_div_7_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementStart(8, \"div\", 4)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"New Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function PasswordResetComponent_Template_input_ngModelChange_11_listener($event) {\n          return ctx.passwordResetData.password1 = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 4)(13, \"label\", 7);\n        i0.ɵɵtext(14, \"Confirm password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function PasswordResetComponent_Template_input_ngModelChange_15_listener($event) {\n          return ctx.passwordResetData.password2 = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"small\", 9);\n        i0.ɵɵtext(17, \"Passwords must contain at least eight characters, including at least 1 letter and 1 number.>\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"button\", 10);\n        i0.ɵɵtext(19, \"Reset password\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(20, \"br\")(21, \"br\")(22, \"br\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.successMessage);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.passwordResetData.password1);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.passwordResetData.password2);\n      }\n    },\n    dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm],\n    styles: [\"body[_ngcontent-%COMP%]{background-color:#f5f5f5}.form-control[_ngcontent-%COMP%]{height:35px;border:1px solid rgb(179,179,179)}.form-control[_ngcontent-%COMP%], .btn[_ngcontent-%COMP%]{border-radius:3px}.signup-form[_ngcontent-%COMP%]{display:block;margin-left:auto;margin-right:auto;max-width:350px;min-width:350px}.signup-form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{color:#000;font-weight:600;font-size:16px;border-radius:3px;margin-bottom:15px;margin-top:15px;background:#fff;box-shadow:1px 5px 7px 1px #00000026;padding:30px}.signup-form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{margin-bottom:5px}.signup-form[_ngcontent-%COMP%]   hr[_ngcontent-%COMP%]{margin:0 -30px 20px}.signup-form[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]{margin-bottom:15px}.signup-form[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{font-size:15px;font-weight:700;margin-top:10px;background:#ff002b;border-radius:1vmin;border:none;min-width:140px}.signup-form[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]:hover, .signup-form[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]:focus{background:#ff004cfa!important;outline:none}.signup-form[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:#fff;text-decoration:underline}.signup-form[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{text-decoration:none}.signup-form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:#ff002b;text-decoration:none}.signup-form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{text-decoration:underline}.signup-form[_ngcontent-%COMP%]   .hint-text[_ngcontent-%COMP%]{padding-bottom:15px;text-align:center}\"]\n  });\n  return PasswordResetComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}