{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { SHRAMBA_BRSKALNIKA } from '../razredi/shramba';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MyseatPodatkiService = /*#__PURE__*/(() => {\n  class MyseatPodatkiService {\n    constructor(http, shramba) {\n      this.http = http;\n      this.shramba = shramba;\n      this.apiUrl = environment.apiUrl;\n    }\n    prijava(uporabnik) {\n      return this.avtentikacija('prijava', uporabnik);\n    }\n    registracija(uporabnik) {\n      return this.avtentikacija('registracija', uporabnik);\n    }\n    avtentikacija(urlNaslov, uporabnik) {\n      const url = `${this.apiUrl}/${urlNaslov}`;\n      return this.http.post(url, uporabnik).toPromise().then(rezultat => rezultat).catch(this.obdelajNapako);\n    }\n    sendRecoveryEmail(emailData) {\n      const url = `${this.apiUrl}/send-recovery-email`;\n      return this.http.post(url, emailData).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    resetPassword(uporabnik) {\n      const url = `${this.apiUrl}/reset-password`;\n      return this.http.post(url, uporabnik).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    resetPasswordGetuserid(token) {\n      const url = `${this.apiUrl}/reset-password/${token}`;\n      return this.http.get(url).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    pridobiLokacije(lat, lng) {\n      const maxRazdalja = 1000;\n      const url = `${this.apiUrl}/list/lokacije?lng=${lng}&lat=${lat}&maxRazdalja=${maxRazdalja}`;\n      return this.http.get(url).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    pridobiPodrobnostiLokacije(idLokacije) {\n      const url = `${this.apiUrl}/lokacije/${idLokacije}`;\n      return this.http.get(url).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    posodobiLokacijo(idLokacije, podatki) {\n      const url = `${this.apiUrl}/lokacije/${idLokacije}`;\n      const httpLastnosti = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\n        })\n      };\n      return this.http.put(url, podatki, httpLastnosti).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    pridobiUporabnike() {\n      const url = `${this.apiUrl}/uporabniki`;\n      return this.http.get(url).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    pridobiPodrobnostiUporabnika(idUporabnika) {\n      const url = `${this.apiUrl}/uporabnik/${idUporabnika}`;\n      return this.http.get(url).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    dodajKomentarLokaciji(idLokacije, podatkiObrazca) {\n      const url = `${this.apiUrl}/lokacije/${idLokacije}/komentarji`;\n      const httpLastnosti = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\n        })\n      };\n      return this.http.post(url, podatkiObrazca, httpLastnosti).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    dodajRestoran(podatkiObrazca) {\n      const url = `${this.apiUrl}/list/lokacije`;\n      const httpLastnosti = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\n        })\n      };\n      return this.http.post(url, podatkiObrazca, httpLastnosti).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    deleteLocation(idLokacije) {\n      const url = `${this.apiUrl}/lokacije/${idLokacije}`;\n      const httpLastnosti = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\n        })\n      };\n      return this.http.delete(url, httpLastnosti).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    deleteComment(idLokacije, idKomentara) {\n      const url = `${this.apiUrl}/lokacije/${idLokacije}/komentarji/${idKomentara}`;\n      const httpLastnosti = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\n        })\n      };\n      return this.http.delete(url, httpLastnosti).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    editComment(idLokacije, idKomentara, podatki) {\n      const url = `${this.apiUrl}/lokacije/${idLokacije}/komentarji/${idKomentara}`;\n      const httpLastnosti = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.shramba.getItem('myseat-zeton')}`\n        })\n      };\n      return this.http.put(url, podatki, httpLastnosti).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    dodajEmail(podatkiObrazca) {\n      const url = `${this.apiUrl}/newsletter`;\n      return this.http.post(url, podatkiObrazca).toPromise().then(odgovor => odgovor).catch(this.obdelajNapako);\n    }\n    obdelajNapako(napaka) {\n      console.error('Prišlo je do napake', napaka.error[\"sporočilo\"] || napaka.error.errmsg || napaka.message || napaka);\n      return Promise.reject(napaka.error[\"sporočilo\"] || napaka.error.errmsg || napaka.message || napaka);\n    }\n  }\n  MyseatPodatkiService.ɵfac = function MyseatPodatkiService_Factory(t) {\n    return new (t || MyseatPodatkiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(SHRAMBA_BRSKALNIKA));\n  };\n  MyseatPodatkiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MyseatPodatkiService,\n    factory: MyseatPodatkiService.ɵfac,\n    providedIn: 'root'\n  });\n  return MyseatPodatkiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}